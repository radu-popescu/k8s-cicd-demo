name: Deploy Standard App (Pre-built Images)

on:
  push:
    branches: [ main ]
    paths:
    - 'deployments/standard-apps/**'
    - '.github/workflows/deploy-standard-app.yml'
  pull_request:
    branches: [ main ]
    paths:
    - 'deployments/standard-apps/**'
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Standard app to deploy'
        required: true
        default: 'nginx'
        type: choice
        options:
        - nginx

env:
  APP_NAME: ${{ github.event.inputs.app_name || 'nginx' }}

jobs:
  validate-manifests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Validating Kubernetes manifests ==="
        kustomize build . | kubectl apply --dry-run=client --validate=false -f -
        echo "‚úÖ Manifests validation passed"

    - name: Check manifest syntax
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking YAML syntax ==="
        for file in *.yaml; do
          if [ -f "$file" ]; then
            echo "Checking syntax of $file..."
            python3 -c "
        import yaml
        import sys
        try:
            with open('$file', 'r') as f:
                yaml.safe_load_all(f.read())
            print('‚úÖ $file syntax is valid')
        except Exception as e:
            print(f'‚ùå $file has syntax errors: {e}')
            sys.exit(1)
        "
          fi
        done
        echo "Validating kustomized output..."
        kustomize build . > /tmp/final-manifests.yaml
        python3 -c "
        import yaml
        import sys
        try:
            with open('/tmp/final-manifests.yaml', 'r') as f:
                docs = list(yaml.safe_load_all(f.read()))
            print(f'‚úÖ Generated {len([d for d in docs if d])} valid resources')
        except Exception as e:
            print(f'‚ùå Generated manifests have syntax errors: {e}')
            sys.exit(1)
        "

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Check resource configuration
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking resource configuration ==="
        kustomize build . > /tmp/manifests.yaml
        if grep -q "resources:" /tmp/manifests.yaml; then
          echo "‚úÖ Resource limits/requests are configured"
          grep -A 6 "resources:" /tmp/manifests.yaml || true
        else
          echo "‚ö†Ô∏è  Warning: No resource limits/requests found"
        fi

    - name: Check security settings
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Basic security checks ==="
        if grep -q "runAsUser.*0" /tmp/manifests.yaml; then
          echo "‚ö†Ô∏è  Warning: Running as root user detected"
        else
          echo "‚úÖ Not explicitly running as root"
        fi
        if grep -q "privileged.*true" /tmp/manifests.yaml; then
          echo "‚ùå Privileged containers detected"
          exit 1
        else
          echo "‚úÖ No privileged containers detected"
        fi

  scan-container-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Extract and scan images
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Extracting container images ==="
        kustomize build . > /tmp/manifests.yaml
        IMAGES=$(grep -E "^\s*image:\s*" /tmp/manifests.yaml | sed 's/.*image:\s*//' | sed 's/[[:space:]]*$//' | sort -u)
        if [ -z "$IMAGES" ]; then
          echo "‚ùå No images found in manifests"
          echo "Manifest content for debugging:"
          cat /tmp/manifests.yaml
          exit 1
        fi
        echo "‚úÖ Found images:"
        echo "$IMAGES"
        echo "=== Installing Trivy ==="
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        echo "=== Scanning images ==="
        echo "$IMAGES" | while read -r image; do
          if [ -n "$image" ] && [ "$image" != "null" ]; then
            echo "Scanning image: $image"
            trivy image --exit-code 0 --severity HIGH,CRITICAL --format table "$image" || echo "‚ö†Ô∏è  Scan failed for $image"
          fi
        done

  deploy:
    needs: [validate-manifests, security-scan, scan-container-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Add deployment metadata
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        kustomize edit add label deployment-timestamp:$(date +%s)
        kustomize edit add label github-sha:${{ github.sha }}
        kustomize edit add label github-run-id:${{ github.run_id }}

    - name: Generate final manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Generating Final Manifests ==="
        kustomize build . | tee final-manifests.yaml
        echo "=== Manifest Summary ==="
        grep "^kind:" final-manifests.yaml | sort | uniq -c
        echo "=== Images Used ==="
        grep -E "^\s*image:\s*" final-manifests.yaml | sed 's/.*image:\s*//' | sort -u

    - name: Validate final manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Final validation ==="
        python3 -c "
        import yaml
        import sys
        try:
            with open('final-manifests.yaml', 'r') as f:
                docs = list(yaml.safe_load_all(f.read()))
            valid_docs = [d for d in docs if d and 'kind' in d]
            print(f'‚úÖ Generated {len(valid_docs)} valid Kubernetes resources')
            for doc in valid_docs:
                print(f'  - {doc.get(\"kind\", \"Unknown\")} \"{doc.get(\"metadata\", {}).get(\"name\", \"unnamed\")}\"')
        except Exception as e:
            print(f'‚ùå Manifests have syntax errors: {e}')
            sys.exit(1)
        "

    - name: Upload deployment manifests
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifests-${{ env.APP_NAME }}-${{ github.sha }}
        path: deployments/standard-apps/${{ env.APP_NAME }}/final-manifests.yaml

    - name: Show deployment summary
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Deployment Summary ==="
        echo "App: ${{ env.APP_NAME }}"
        echo "SHA: ${{ github.sha }}"
        echo "Timestamp: $(date)"
        echo "‚úÖ Pipeline completed successfully!"
        echo "üì¶ Manifests uploaded as artifacts"
        echo "=== Generated Resources ==="
        grep "^kind:" final-manifests.yaml | sort | uniq -c