name: Deploy Standard App (Pre-built Images)

on:
  push:
    branches: [ main ]
    paths:
    - 'deployments/standard-apps/**'
    - '.github/workflows/deploy-standard-app.yml'
  pull_request:
    branches: [ main ]
    paths:
    - 'deployments/standard-apps/**'
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Standard app to deploy'
        required: true
        default: 'nginx'
        type: choice
        options:
        - nginx

env:
  APP_NAME: ${{ github.event.inputs.app_name || 'nginx' }}

jobs:
  # Stage 1: Validation and Testing
  validate-manifests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Validating Kubernetes manifests ==="
        kustomize build . | kubectl apply --dry-run=client -f -
        echo "✅ Manifests validation passed"

    - name: Check manifest syntax
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking YAML syntax ==="
        
        # Check each YAML file individually
        for file in *.yaml; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            kubectl apply --dry-run=client -f "$file" >/dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "✅ $file is valid"
            else
              echo "❌ $file has issues"
              kubectl apply --dry-run=client -f "$file"
              exit 1
            fi
          fi
        done
        
        # Validate kustomized output
        echo "Validating final kustomized output..."
        kustomize build . > /tmp/final-manifests.yaml
        kubectl apply --dry-run=client -f /tmp/final-manifests.yaml
        echo "✅ All manifests are valid"

  # Stage 2: Basic Security Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Check resource configuration
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking resource configuration ==="
        
        if kustomize build . | grep -q "resources:"; then
          echo "✅ Resource limits/requests are configured"
          echo "Resource configuration found:"
          kustomize build . | grep -A 6 "resources:" || true
        else
          echo "⚠️  Warning: No resource limits/requests found"
          echo "This is not necessarily an error, but recommended for production"
        fi

    - name: Check security context
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking security context ==="
        
        if kustomize build . | grep -q "securityContext:"; then
          echo "✅ Security context is configured"
          kustomize build . | grep -A 10 "securityContext:" || true
        else
          echo "ℹ️  No explicit security context found"
        fi

    - name: Check for common security issues
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Basic security checks ==="
        
        # Check for root user
        if kustomize build . | grep -q "runAsUser.*0"; then
          echo "⚠️  Warning: Running as root user detected"
        else
          echo "✅ Not explicitly running as root"
        fi
        
        # Check for privileged containers
        if kustomize build . | grep -q "privileged.*true"; then
          echo "❌ Privileged containers detected - this is dangerous!"
          exit 1
        else
          echo "✅ No privileged containers detected"
        fi
        
        # Check for host network
        if kustomize build . | grep -q "hostNetwork.*true"; then
          echo "⚠️  Warning: Host network access detected"
        else
          echo "✅ No host network access"
        fi

  # Stage 3: Image Security Scan
  scan-container-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Extract and scan container images
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Extracting container images ==="
        
        # Extract images from manifests
        IMAGES=$(kustomize build . | grep -E "^\s+image:" | awk '{print $2}' | sort -u)
        
        if [ -z "$IMAGES" ]; then
          echo "No images found in manifests"
          exit 1
        fi
        
        echo "Found images:"
        echo "$IMAGES"
        
        # Install Trivy
        echo "=== Installing Trivy ==="
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        
        # Scan each image
        echo "=== Scanning container images ==="
        echo "$IMAGES" | while read -r image; do
          if [ -n "$image" ]; then
            echo "Scanning image: $image"
            # Use --exit-code 0 to not fail on vulnerabilities, just report them
            trivy image --exit-code 0 --severity HIGH,CRITICAL --format table "$image"
            echo "Scan completed for $image"
            echo "---"
          fi
        done

  # Stage 4: Deploy to Kubernetes
  deploy:
    needs: [validate-manifests, security-scan, scan-container-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    # For local testing with kind (uncomment for remote cluster)
    # - name: Configure kubectl for remote cluster
    #   run: |
    #     echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
    #     export KUBECONFIG=kubeconfig

    - name: Add deployment metadata
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        
        # Add timestamp and git info as labels
        kustomize edit add label deployment-timestamp:$(date +%s)
        kustomize edit add label github-sha:${{ github.sha }}
        kustomize edit add label github-run-id:${{ github.run_id }}
        kustomize edit add label deployed-by:github-actions

    - name: Generate final manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Generating Final Kubernetes Manifests ==="
        kustomize build . | tee final-manifests.yaml
        
        echo ""
        echo "=== Manifest Summary ==="
        echo "Resources to be deployed:"
        grep "^kind:" final-manifests.yaml | sort | uniq -c
        
        echo ""
        echo "=== Namespaces ==="
        grep "namespace:" final-manifests.yaml | sort -u || echo "Using default namespace"

    - name: Validate final manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Final validation ==="
        kubectl apply --dry-run=client -f final-manifests.yaml
        echo "✅ Final manifests are valid and ready for deployment"

    - name: Upload deployment manifests
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifests-${{ env.APP_NAME }}-${{ github.sha }}
        path: deployments/standard-apps/${{ env.APP_NAME }}/final-manifests.yaml

    # Uncomment for actual deployment to cluster
    # - name: Deploy to Kubernetes
    #   run: |
    #     cd deployments/standard-apps/${{ env.APP_NAME }}
    #     echo "=== Deploying to Kubernetes ==="
    #     kubectl apply -f final-manifests.yaml
    #     
    #     # Wait for deployment to be ready
    #     DEPLOYMENT_NAME=$(grep "^  name:" final-manifests.yaml | grep -A1 "kind: Deployment" | tail -1 | awk '{print $2}')
    #     NAMESPACE=$(grep "namespace:" final-manifests.yaml | head -1 | awk '{print $2}' || echo "default")
    #     
    #     if [ -n "$DEPLOYMENT_NAME" ]; then
    #       echo "Waiting for deployment $DEPLOYMENT_NAME in namespace $NAMESPACE"
    #       kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=300s
    #       
    #       echo "=== Deployment Status ==="
    #       kubectl get pods -n $NAMESPACE -l app=${{ env.APP_NAME }}
    #       kubectl get services -n $NAMESPACE
    #     fi

    - name: Show deployment summary
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Deployment Summary ==="
        echo "App: ${{ env.APP_NAME }}"
        echo "SHA: ${{ github.sha }}"
        echo "Timestamp: $(date)"
        echo "Workflow: Standard App Deployment"
        echo ""
        echo "Manifests generated successfully and uploaded as artifacts."
        echo "To deploy to a cluster, uncomment the deployment step and configure KUBECONFIG secret."
        echo ""
        echo "=== Next Steps ==="
        echo "1. Download the deployment manifests from the artifacts"
        echo "2. Review the generated manifests"
        echo "3. Apply to your Kubernetes cluster: kubectl apply -f final-manifests.yaml"