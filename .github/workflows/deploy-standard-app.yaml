name: Deploy Standard App (Pre-built Images)

on:
  push:
    branches: [ main ]
    paths:
    - 'deployments/standard-apps/**'
    - '.github/workflows/deploy-standard-app.yml'
  pull_request:
    branches: [ main ]
    paths:
    - 'deployments/standard-apps/**'
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Standard app to deploy'
        required: true
        default: 'nginx'
        type: choice
        options:
        - nginx

env:
  APP_NAME: ${{ github.event.inputs.app_name || 'nginx' }}

jobs:
  # Stage 1: Validation and Testing
  validate-manifests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate Kubernetes manifests (without server)
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Validating Kubernetes manifests ==="
        
        # Use --validate=false to avoid OpenAPI issues in CI
        kustomize build . | kubectl apply --dry-run=client --validate=false -f -
        echo "✅ Manifests validation passed"

    - name: Check manifest syntax
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking YAML syntax ==="
        
        # Check each YAML file individually for syntax
        for file in *.yaml; do
          if [ -f "$file" ]; then
            echo "Checking syntax of $file..."
            # Basic YAML syntax check using Python
            python3 -c "
import yaml
import sys
try:
    with open('$file', 'r') as f:
        yaml.safe_load_all(f.read())
    print('✅ $file syntax is valid')
except Exception as e:
    print(f'❌ $file has syntax errors: {e}')
    sys.exit(1)
"
          fi
        done
        
        # Check kustomized output syntax
        echo "Validating kustomized output syntax..."
        kustomize build . > /tmp/final-manifests.yaml
        python3 -c "
import yaml
import sys
try:
    with open('/tmp/final-manifests.yaml', 'r') as f:
        docs = list(yaml.safe_load_all(f.read()))
    print(f'✅ Generated {len([d for d in docs if d])} valid Kubernetes resources')
except Exception as e:
    print(f'❌ Generated manifests have syntax errors: {e}')
    sys.exit(1)
"

  # Stage 2: Basic Security Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Check resource configuration
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking resource configuration ==="
        
        kustomize build . > /tmp/manifests.yaml
        
        if grep -q "resources:" /tmp/manifests.yaml; then
          echo "✅ Resource limits/requests are configured"
          echo "Resource configuration found:"
          grep -A 6 "resources:" /tmp/manifests.yaml || true
        else
          echo "⚠️  Warning: No resource limits/requests found"
          echo "This is not necessarily an error, but recommended for production"
        fi

    - name: Check security context
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Checking security context ==="
        
        if grep -q "securityContext:" /tmp/manifests.yaml; then
          echo "✅ Security context is configured"
          grep -A 10 "securityContext:" /tmp/manifests.yaml || true
        else
          echo "ℹ️  No explicit security context found"
        fi

    - name: Check for common security issues
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Basic security checks ==="
        
        # Check for root user
        if grep -q "runAsUser.*0" /tmp/manifests.yaml; then
          echo "⚠️  Warning: Running as root user detected"
        else
          echo "✅ Not explicitly running as root"
        fi
        
        # Check for privileged containers
        if grep -q "privileged.*true" /tmp/manifests.yaml; then
          echo "❌ Privileged containers detected - this is dangerous!"
          exit 1
        else
          echo "✅ No privileged containers detected"
        fi
        
        # Check for host network
        if grep -q "hostNetwork.*true" /tmp/manifests.yaml; then
          echo "⚠️  Warning: Host network access detected"
        else
          echo "✅ No host network access"
        fi

  # Stage 3: Image Security Scan
  scan-container-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Extract and scan container images
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Extracting container images ==="
        
        # Generate manifests and extract images
        kustomize build . > /tmp/manifests.yaml
        
        # More robust image extraction
        IMAGES=$(grep -E "^\s*image:\s*" /tmp/manifests.yaml | sed 's/.*image:\s*//' | sed 's/[[:space:]]*$//' | sort -u)
        
        if [ -z "$IMAGES" ]; then
          echo "❌ No images found in manifests"
          echo "Checking manifest content for debugging:"
          echo "=== Manifest content ==="
          cat /tmp/manifests.yaml
          echo "=== End manifest content ==="
          echo ""
          echo "Looking for any image references:"
          grep -i image /tmp/manifests.yaml || echo "No image references found at all"
          exit 1
        fi
        
        echo "✅ Found images:"
        echo "$IMAGES"
        
        # Install Trivy
        echo "=== Installing Trivy ==="
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y
        
        # Scan each image
        echo "=== Scanning container images ==="
        echo "$IMAGES" | while read -r image; do
          if [ -n "$image" ] && [ "$image" != "null" ]; then
            echo "Scanning image: $image"
            # Use --exit-code 0 to not fail on vulnerabilities, just report them
            trivy image --exit-code 0 --severity HIGH,CRITICAL --format table "$image" || {
              echo "⚠️  Trivy scan failed for $image, but continuing..."
            }
            echo "---"
          fi
        done

  # Stage 4: Deploy to Kubernetes
  deploy:
    needs: [validate-manifests, security-scan, scan-container-image]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    # For local testing with kind (uncomment for remote cluster)
    # - name: Configure kubectl for remote cluster
    #   run: |
    #     echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
    #     export KUBECONFIG=kubeconfig

    - name: Add deployment metadata
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        
        # Add timestamp and git info as labels
        kustomize edit add label deployment-timestamp:$(date +%s)
        kustomize edit add label github-sha:${{ github.sha }}
        kustomize edit add label github-run-id:${{ github.run_id }}
        kustomize edit add label deployed-by:github-actions

    - name: Generate final manifests
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Generating Final Kubernetes Manifests ==="
        kustomize build . | tee final-manifests.yaml
        
        echo ""
        echo "=== Manifest Summary ==="
        echo "Resources to be deployed:"
        grep "^kind:" final-manifests.yaml | sort | uniq -c
        
        echo ""
        echo "=== Namespaces ==="
        grep "namespace:" final-manifests.yaml | sort -u || echo "Using default namespace"
        
        echo ""
        echo "=== Images Used ==="
        grep -E "^\s*image:\s*" final-manifests.yaml | sed 's/.*image:\s*//' | sort -u

    - name: Validate final manifests (offline)
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Final validation (syntax only) ==="
        
        # Validate YAML syntax
        python3 -c "
import yaml
import sys
try:
    with open('final-manifests.yaml', 'r') as f:
        docs = list(yaml.safe_load_all(f.read()))
    valid_docs = [d for d in docs if d and 'kind' in d]
    print(f'✅ Generated {len(valid_docs)} valid Kubernetes resources')
    for doc in valid_docs:
        print(f'  - {doc.get(\"kind\", \"Unknown\")} \"{doc.get(\"metadata\", {}).get(\"name\", \"unnamed\")}\"')
except Exception as e:
    print(f'❌ Generated manifests have syntax errors: {e}')
    sys.exit(1)
"

    - name: Upload deployment manifests
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifests-${{ env.APP_NAME }}-${{ github.sha }}
        path: deployments/standard-apps/${{ env.APP_NAME }}/final-manifests.yaml

    # Uncomment for actual deployment to cluster
    # - name: Deploy to Kubernetes
    #   run: |
    #     cd deployments/standard-apps/${{ env.APP_NAME }}
    #     echo "=== Deploying to Kubernetes ==="
    #     kubectl apply -f final-manifests.yaml
    #     
    #     # Wait for deployment to be ready
    #     DEPLOYMENT_NAMES=$(grep -A1 "kind: Deployment" final-manifests.yaml | grep "name:" | awk '{print $2}')
    #     NAMESPACE=$(grep "namespace:" final-manifests.yaml | head -1 | awk '{print $2}' || echo "default")
    #     
    #     for DEPLOYMENT_NAME in $DEPLOYMENT_NAMES; do
    #       if [ -n "$DEPLOYMENT_NAME" ]; then
    #         echo "Waiting for deployment $DEPLOYMENT_NAME in namespace $NAMESPACE"
    #         kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=300s
    #       fi
    #     done
    #     
    #     echo "=== Deployment Status ==="
    #     kubectl get pods -n $NAMESPACE
    #     kubectl get services -n $NAMESPACE

    - name: Show deployment summary
      run: |
        cd deployments/standard-apps/${{ env.APP_NAME }}
        echo "=== Deployment Summary ==="
        echo "App: ${{ env.APP_NAME }}"
        echo "SHA: ${{ github.sha }}"
        echo "Timestamp: $(date)"
        echo "Workflow: Standard App Deployment"
        echo ""
        echo "✅ Pipeline completed successfully!"
        echo "📦 Manifests generated and uploaded as artifacts"
        echo ""
        echo "=== Generated Resources ==="
        grep "^kind:" final-manifests.yaml | sort | uniq -c
        echo ""
        echo "=== Next Steps ==="
        echo "1. Download the deployment manifests from the artifacts"
        echo "2. Review the generated manifests"
        echo "3. Apply to your Kubernetes cluster: kubectl apply -f final-manifests.yaml"
        echo ""
        echo "To enable automatic deployment:"
        echo "1. Set up KUBECONFIG secret in GitHub repository"
        echo "2. Uncomment the deployment step in this workflow"